function init() { var a = esri.urlToObject(document.location.href); a.query = a.query || {}; a.query.embed && "true" === a.query.embed && res.embedSetup() } function VisionZero() { this._sqlMain = void 0, this._sqlInjuries = void 0, this._sqlLocations = void 0, this._selectFactors = void 0, this._toDate = void 0, this._fromDate = void 0, this._crashLayerVisible = void 0, this._mapExtentXmin = void 0, this._mapExtentXmax = void 0, this._mapExtentYmin = void 0, this._mapExtentYmax = void 0, this._factorSqlString = void 0, this._sqlView = void 0, this._viewByData = void 0, this._id = void 0, this._dropdwnVal = void 0, this._displayField = void 0 } function buildVzObject() { try { Object.defineProperty(VisionZero.prototype, "sqlMain", { set: function (a) { this._sqlMain = a; document.getElementById("factorTextSql"); void 0 === a && (a = "") }, get: function () { return this._sqlMain } }), Object.defineProperty(VisionZero.prototype, "factorSqlString", { set: function (a) { this._factorSqlString = a }, get: function () { return this._factorSqlString } }), Object.defineProperty(VisionZero.prototype, "viewByData", { set: function (a) { this._viewByData = a }, get: function () { return this._viewByData } }), Object.defineProperty(VisionZero.prototype, "id", { set: function (a) { this._id = a }, get: function () { return this._id } }), Object.defineProperty(VisionZero.prototype, "dropdwnVal", { set: function (a) { this._dropdwnVal = a }, get: function () { return this._dropdwnVal } }), Object.defineProperty(VisionZero.prototype, "displayField", { set: function (a) { this._displayField = a }, get: function () { return this._displayField } }), Object.defineProperty(VisionZero.prototype, "sqlView", { set: function (a) { this._sqlView = a }, get: function () { return this._sqlView } }), Object.defineProperty(VisionZero.prototype, "sqlInjuries", { set: function (a) { this._sqlInjuries = a, constructSQL() }, get: function () { return this._sqlInjuries } }), Object.defineProperty(VisionZero.prototype, "sqlLocations", { set: function (a) { this._sqlLocations = a }, get: function () { return this._sqlLocations } }), Object.defineProperty(VisionZero.prototype, "selectFactors", { set: function (a) { this._selectFactors = a }, get: function () { return this._selectFactors } }), Object.defineProperty(VisionZero.prototype, "toDate", { set: function (a) { this._toDate = a }, get: function () { return this._toDate } }), Object.defineProperty(VisionZero.prototype, "fromDate", { set: function (a) { this._fromDate = a }, get: function () { return this._fromDate } }), Object.defineProperty(VisionZero.prototype, "crashLayerVisible", { set: function (a) { this._crashLayerVisible = a }, get: function () { return this._crashLayerVisible } }), Object.defineProperty(VisionZero.prototype, "mapExtentXmin", { set: function (a) { this._mapExtentXmin = a }, get: function () { return this._mapExtentXmin } }), Object.defineProperty(VisionZero.prototype, "mapExtentXmax", { set: function (a) { this._mapExtentXmax = a }, get: function () { return this._mapExtentXmax } }), Object.defineProperty(VisionZero.prototype, "mapExtentYmin", { set: function (a) { this._mapExtentYmin = a }, get: function () { return this._mapExtentYmin } }), Object.defineProperty(VisionZero.prototype, "mapExtentYmax", { set: function (a) { this._mapExtentYmax = a }, get: function () { return this._mapExtentYmax } }), Object.defineProperty(VisionZero.prototype, "sqlDate", { set: function (a) { this._sqlDate = a }, get: function () { return this._sqlDate } }) } catch (a) { alert(a) } } function onMapLoaded() { buildVzObject(), visionZero = new VisionZero, visionZero.factorSqlString = "(", visionZero.sqlView = "", visionZero.sqlDate = "", visionZero.sqlInjuries = "(Severity = 'K')", visionZero.id = "", visionZero.dropdwnVal = "", visionZero.displayField = "", visionZero.selectFactors = [], getFirstViewByContent(), defaultcrashSymbol = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_CIRCLE, 2, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new esri.Color([255, 0, 0, 1]))), crashRend = new esri.renderer.SimpleRenderer(defaultcrashSymbol), sfs = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new esri.Color([255, 0, 0, .5]), 1.25), new esri.Color([255, 255, 0, .11])), selectionSymbol = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_CIRCLE, 14, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new esri.Color([0, 255, 197, 1]))), console.log("map loaded enter"); new esri.dijit.Scalebar({ map: map, attachTo: "bottom-left", scalebarUnit: "metric" }); $(".esriScalebarLabel").each(function () { this.style.width = "auto" }), new esri.dijit.Measurement({ map: map }, dojo.byId("measurementDiv")).startup(), currentBasemap = new esri.layers.ArcGISTiledMapServiceLayer(getBasemapUrl(basemaps.services[2]), { id: "basemap" }), map.addLayer(currentBasemap), refGraphicsLayer = new esri.layers.GraphicsLayer({ id: "Reference Graphics Data" }), map.addLayer(refGraphicsLayer), refLayer = new esri.layers.ArcGISDynamicMapServiceLayer(boundariesURL, { id: "Reference Data" }), map.addLayer(refLayer), refLayerVisibility.push(-1), refLayer.setVisibleLayers(refLayerVisibility); try { crashLayer = new esri.layers.FeatureLayer(crashURL, { id: "Crash Data", outFields: ["*"], visible: !1, mode: esri.layers.FeatureLayer.MODE_ONDEMAND }), notLocatedLayer = new esri.layers.FeatureLayer(crashURLNotLocated, { id: "Non Mapped Crash Data", outFields: ["*"], visible: !1, mode: esri.layers.FeatureLayer.MODE_ONDEMAND }) } catch (a) { alert(a) } crashLayer.on("update-end", filterCrashes), mapClicked = map.on("click", executeVisionZeroQueryTask), crashLayer.setSelectionSymbol(selectionSymbol), map.addLayer(crashLayer), createFeatureTable(), webmapResponse && webmapResponse.itemInfo && webmapResponse.itemInfo.item && res.populateMapInfo(webmapResponse.itemInfo.item), res.mobile ? switchToMobile() : switchToDesktop(), getDates(), map.on("extent-change", trackExtent), initShare() } function trackExtent() { visionZero.mapExtentXmax = map.extent.xmax, visionZero.mapExtentXmin = map.extent.xmin, visionZero.mapExtentYmax = map.extent.ymax, visionZero.mapExtentYmin = map.extent.ymin } function zoomToShareExtent() { var a = new esri.geometry.Extent(visionZero.mapExtentXmin, visionZero.mapExtentYmin, visionZero.mapExtentXmax, visionZero.mapExtentYmax, new esri.SpatialReference({ wkid: 102100 })); map.setExtent(a) } function createFeatureTable() { try { myFeatureTable = new esri.dijit.FeatureTable({ featureLayer: crashLayer, map: map, gridOptions: { allowSelectAll: !1, allowTextSelection: !0, pagination: !0 }, editable: !1, showFeatureCount: !1, zoomToSelection: !1, showGridHeader: !0, showGridMenu: !1, syncSelection: !0, dateOptions: { datePattern: "EEEE, MMMM d, y" }, outFields: ["CRASH_DATE", "WEATHER", "WORKZONE", "DATE_TEXT"], fieldInfos: [{ name: "CRASH_DATE", alias: "Crash Date" }, { name: "WEATHER", alias: "Weather" }, { name: "WORKZONE", alias: "Work Zone" }, { name: "DATE_TEXT", alias: "Date" }] }, "FeaturesDataTable"), notLocatedFeatureTable = new esri.dijit.FeatureTable({ featureLayer: notLocatedLayer, map: map, gridOptions: { allowSelectAll: !1, allowTextSelection: !0, pagination: !0, columnHider: !1, columnResizer: !0 }, editable: !1, zoomToSelection: !1, showGridHeader: !0, showGridMenu: !1, syncSelection: !1, dateOptions: { datePattern: "EEEE, MMMM d, y" }, outFields: ["CRASH_DATE", "WEATHER", "WORKZONE", "DATE_TEXT"], fieldInfos: [{ name: "CRASH_DATE", alias: "Crash Date" }, { name: "WEATHER", alias: "Weather" }, { name: "WORKZONE", alias: "Work Zone" }, { name: "DATE_TEXT", alias: "Date" }] }, "NonMappedDataTable") } catch (a) { alert(a) } myFeatureTable.startup(), notLocatedFeatureTable.startup() } function onMapExtentChange() { var a = Math.round(esri.geometry.getScale(map)); a > 999 && a <= 999999 ? a = Math.round(a / 1e3) + " <b>K</b>" : a > 999999 ? a = Math.round(a / 1e6) + " <b>M</b>" : a > 0 && a <= 999 && (a = Math.round(a) + " <b>Ft</b>") } function getBasemaps() { showBasemaps(basemaps.services) } function getBasemapUrl(a) { return "https://server.arcgisonline.com/ArcGIS/rest/services/" + a.name + "/" + a.type } function showBasemaps(a) { var b = ""; for (i = 0; i < a.length; i++) { var c = a[i]; "MapServer" === c.type && "World_Imagery" != c.name && (b += "<a href='#' data-name='" + c.name + "' class='fm_basemap_option' ><img src='images/" + c.image + "' class='fm_basemap_image' /><label>" + c.title + "</label>") } $("#basemapList").html(b) } function setBasemap(a) { var b; for (i = 0; i < basemaps.services.length; i++) if (basemaps.services[i].name === a) { if (currentBasemap) { map.removeLayer(currentBasemap); var d = map.getLayer("imagery"); map.getLayer(0); d && map.removeLayer(d) } return currentBasemap = new esri.layers.ArcGISTiledMapServiceLayer(getBasemapUrl(basemaps.services[i]), { id: "Basemap" }), "Reference/World_Transportation" == a ? (b = new esri.layers.ArcGISTiledMapServiceLayer(getBasemapUrl(basemaps.services[1]), { id: "imagery" }), currentBasemap.id = "Streets", map.addLayer(b, 0), map.addLayer(currentBasemap, 1)) : map.addLayer(currentBasemap, 0), !0 } } function selectReferenceObject(a, b, c, d) { targetField = c; var e = new esri.tasks.QueryTask(boundariesURL + b), f = new esri.tasks.Query; f.returnGeometry = d, f.outFields = [c], f.where = a, d ? e.execute(f, loadData, onError) : e.execute(f, loadAttrib, onError) } function Hello(a) { alert("hello") } function onError(a) { alert(a) } function loadData(a) { if (a.features.length > 0) { refGraphicsLayer.clear(); var b = a.features[0].geometry.getExtent(), c = a.features[0]; if (c.symbol = sfs, refGraphicsLayer.add(c), a.features.length > 1) for (var d = 1; d < a.features.length; d++) { var c = a.features[d], e = c.geometry.getExtent(); refGraphicsLayer.add(c, sfs), b.union(e) } map.setExtent(b.expand(1.5)) } } function loadAttrib(a) { vals = [], referenceVals = []; for (var b = 0; b < a.features.length; b++) { var c = a.features[b]; null != c.attributes[targetField] && referenceVals.push(c.attributes[targetField]) } var d = document.getElementById("ViewByData"); d.innerHTML = ""; var e = document.createElement("option"); e.appendChild(document.createTextNode("")), e.value = "", d.appendChild(e); var f; f = "County" == targetField || "MB_NAME" == targetField ? referenceVals.sort() : referenceVals; for (var g = 0; g < f.length; g++) { var e = document.createElement("option"); e.appendChild(document.createTextNode(f[g])), "" != f[g] && (e.value = f[g], d.appendChild(e)) } } function setSubLayerVisibility(a, b) { a.setVisibleLayers(b) } function filterDataOnViewBy(a, b, c) { switch (b) { case "Date": visionZero.sqlDate = a; break; case "ViewBy": visionZero.sqlView = a } } function updateCrashLayer() { constructSQL(), crashLayer.setDefinitionExpression(visionZero.sqlMain), crashLayer.clearSelection(), notLocatedLayer.setDefinitionExpression(visionZero.sqlMain), void 0 !== myFeatureTable && myFeatureTable._createStoreFromDataQuery(), void 0 !== notLocatedFeatureTable && notLocatedFeatureTable._createStoreFromDataQuery(), $("#ViewByData").change(), visionZero.crashLayerVisible = !0, crashLayer.show(), notLocatedLayer.show(), visionZero.selectFactors.length < 1 && enableCluster() } function getDates() { var a = new esri.tasks.QueryTask("//gis.coverlab.org/arcgis/rest/services/vzmaps/crash_service/MapServer/2"), b = new esri.tasks.Query; b.outFields = ["MINDATE, MAXDATE"], b.where = "1 = 1", a.execute(b, getMinMaxDate, onError) } function getMinMaxDate(a) { var b = new Date(a.features[0].attributes.MINDATE), c = new Date(a.features[0].attributes.MAXDATE); updateDatePickers(b, c) } function createClusterFromViewBy() { if ("undefined" == typeof sqlString) return void alert("no data is selected."); var a = new esri.tasks.QueryTask(crashLayer.url), b = new esri.tasks.Query; b.returnGeometry = !0, b.outFields = ["*"], b.where = visionZero.sqlMain, a.execute(b, getClusterData, onError) } function getClusterData(a) { var b = 0; if (a.features.length > 0) { crashGraphicsLayer = new esri.layers.GraphicsLayer({ id: "Crash Graphics Data" }); for (var c = 1; c < a.features.length; c++) { var d = a.features[c]; crashGraphicsLayer.add(d) } var f = (buildpopupTemplate(), buildItems(crashGraphicsLayer)); dojo.require("extras.ClusterLayer"), dojo.addOnLoad(function () { try { clusterLayer = new extras.ClusterLayer({ data: f, distance: 100, id: "clusters", labelColor: "#fff", labelOffset: 10, resolution: map.extent.getWidth() / map.width, singleColor: "#888", useDefaultSymbol: !0, objectIdField: "OBJECTID" }) } catch (c) { b += 1, b < 2 && getClusterData(a) } var c = buildRenderer(); clusterLayer.setRenderer(c), map.addLayer(clusterLayer), crashLayer.hide(), notLocatedLayer.hide(), visionZero.crashLayerVisible = !1 }) } } function ViewByPoints() { void 0 !== crashLayer.getDefinitionExpression() && (updateCrashLayer(), visionZero.crashLayerVisible = !0), removeClusterLayer() } function removeClusterLayer() { void 0 !== clusterLayer && map.removeLayer(clusterLayer) } function buildItems(a) { for (var b = [], c = crashGraphicsLayer.graphics.length - 1, d = 1; d <= c; d++) { var e = a.graphics[d], f = new esri.geometry.Point(e.geometry), g = { "Crash Date": buildDate(e.attributes.CRASH_DATE), "Crash ID": e.attributes.CRSH_ID, Severity: e.attributes.Severity, Speeding: convertIntToText(e.attributes.SPEED_FL), "Teen Driver": convertIntToText(e.attributes.TEEN_DRIVE), "Older Driver": convertIntToText(e.attributes.OLDER_DRIV), "Alcohol/Drug": convertIntToText(e.attributes.ALCOHOL_FL), Motorcycle: convertIntToText(e.attributes.MOTORCYCLE_FLAG), Unbelted: convertIntToText(e.attributes.UNBELTED_F), "Crash Type": e.attributes.CRASH_TYPE }, h = { x: f.x, y: f.y, attributes: g }; b.push(h) } return b } function buildDate(a) { var b = new Date(a); return b.getMonth() + 1 + "/" + b.getDate() + "/" + b.getFullYear() } function convertIntToText(a) { return 1 == a ? "Yes" : "No" } function buildRenderer() { var a = (new esri.symbol.SimpleMarkerSymbol).setSize(4), b = new esri.renderer.ClassBreaksRenderer(a, "clusterCount"), c = new esri.symbol.SimpleMarkerSymbol; c.setSize("18"), c.setColor(new esri.Color([255, 0, 0, .5])), c.setOutline(null), c.setOffset(0, 12); var d = new esri.symbol.SimpleMarkerSymbol; d.setSize("30"), d.setColor(new esri.Color([255, 0, 0, .6])), d.setOutline(null), d.setOffset(0, 12); var e = new esri.symbol.SimpleMarkerSymbol; e.setSize("36"), e.setColor(new esri.Color([255, 0, 0, .7])), e.setOutline(null), e.setOffset(0, 12); var f = new esri.symbol.SimpleMarkerSymbol; f.setSize("42"), f.setColor(new esri.Color([255, 0, 0, .8])), f.setOutline(null), f.setOffset(0, 12); var g = new esri.symbol.SimpleMarkerSymbol; return g.setSize("48"), g.setColor(new esri.Color([255, 0, 0, .9])), g.setOutline(null), g.setOffset(0, 12), b.addBreak(0, 2, c), b.addBreak(3, 5, d), b.addBreak(6, 9, e), b.addBreak(10, 15, f), b.addBreak(15, 1001, g), b } function buildpopupTemplate() { return esri.dijit.PopupTemplate({ title: "Crash Info", fieldInfos: [{ fieldName: "DATE_TEXT", label: "Crash Date: ", visible: !0 }, { fieldName: "CRSH_ID", label: "Crash ID: ", visible: !0 }, { fieldName: "Severity", label: "Severity: ", visible: !0 }, { fieldName: "SPEED_FL", label: "Speeding: ", visible: !0 }, { fieldName: "TEEN_DRIVE", label: "Teen Driver: ", visible: !0 }, { fieldName: "OLDER_DRIV", label: "Older Driver: ", visible: !0 }, { fieldName: "ALCOHOL_FL", label: "Alcohol/Drug:", visible: !0 }, { fieldName: "MOTORCYCLE_FLAG", label: "Motorcycle:", visible: !0 }, { fieldName: "UNBELTED_F", label: "Unbelted:", visible: !0 }, { fieldName: "CRASH_TYPE", label: "Crash Type:", visible: !0 }] }) } function zoomToNC() { document.getElementById("ViewByData").innerHTML = ""; var b = new esri.geometry.Extent({ xmin: -9386662, ymin: 4007552, xmax: -8400130, ymax: 4381853, spatialReference: { wkid: 102100 } }); map.setExtent(b), refLayerVisibility = [], refLayerVisibility.push(-1), refGraphicsLayer.clear() } function ZoomToLDefaultExtent(a) { dojo.io.script.get({ url: boundariesURL + a + "?f=json", content: { q: "#dojo" }, callbackParamName: "callback" }).then(function (a) { var b = new esri.geometry.Extent; b.xmax = a.extent.xmax, b.xmin = a.extent.xmin, b.ymax = a.extent.ymax, b.ymin = a.extent.ymin, map.setExtent(b) }) } function filterCrashes() { myFeatureTable._createStoreFromDataQuery(), notLocatedFeatureTable._createStoreFromDataQuery(), crashLayer.clearSelection(); var a = new esri.tasks.Query; a.returnGeometry = !1, a.outFields = ["*"], a.where = "1=1", crashLayer.queryFeatures(a, queryCrashes, onError) } function queryCrashes(a) { resetHeatGrid(), crashTots = a.features.length; for (var b = 0; b < a.features.length; b++) updateHeatChart(a.features[b].attributes.DATE_TEXT); var c = esri.tasks.QueryTask(crashURLNotLocated), d = new esri.tasks.Query; d.returnGeometry = !1, d.outFields = ["*"], d.where = crashLayer.getDefinitionExpression(), d.geometry = null, c.execute(d, finalTotals, onError) } function finalTotals(a) { totalCnt = crashTots + a.features.length; for (var b = 0; b < a.features.length; b++) updateHeatChart(a.features[b].attributes.DATE_TEXT); document.getElementById("resultsHeader").innerText = "Crashes Mapped: " + crashTots + " of " + totalCnt } function updateHeatChart(a) { var b = new Date(parse(a)), c = b.getDay(), d = b.getHours(), e = "", f = ""; switch (c) { case 0: e = "sun"; break; case 1: e = "mon"; break; case 2: e = "tues"; break; case 3: e = "wed"; break; case 4: e = "thurs"; break; case 5: e = "fri"; break; case 6: e = "sat" } switch (d) { case 0: case 1: case 2: case 3: f = "12a"; break; case 4: case 5: case 6: case 7: f = "4a"; break; case 8: case 9: case 10: case 11: f = "8a"; break; case 12: case 13: case 14: case 15: f = "12p"; break; case 16: case 17: case 18: case 19: f = "4p"; break; case 20: case 21: case 22: case 23: f = "8p" } var g = Number(document.getElementById(e + f).innerHTML); g += 1, document.getElementById(e + f).innerHTML = g, setBackground(g, e + f) } function resetHeatGrid() { var c = ["sun", "mon", "tues", "wed", "thurs", "fri", "sat"], d = ["12a", "4a", "8a", "12p", "4p", "8p"]; for (a = 0; a < c.length; a++) for (b = 0; b < d.length; b++) document.getElementById(c[a] + d[b]).innerHTML = "", document.getElementById(c[a] + d[b]).style.backgroundColor = "", document.getElementById(c[a] + d[b]).style.color = "" } function setBackground(a, b) { var c = "", d = ""; a >= 0 && a <= 2 ? (c = "#6495ED", d = "white") : a >= 3 && a <= 5 ? (c = "#87CEFA", d = "white") : a >= 6 && a <= 10 ? (c = "#ADD8E6", d = "gray") : a >= 11 && a <= 15 ? (c = "#FFC0CB", d = "gray") : a >= 16 && a <= 20 ? (c = "#FF0000", d = "gray") : a >= 21 && a <= 25 ? (c = "#d22f2f", d = "gray") : a >= 26 && a <= 30 ? (c = "#a33535", d = "gray") : a >= 31 && a <= 35 ? (c = "#983131", d = "gray") : a > 36 && (c = "#5a1f1f", d = "gray"), document.getElementById(b).style.backgroundColor = c, document.getElementById(b).style.color = d } function switchToMobile() { console.log("switch to mobile popup"), require(["esri/dijit/PopupMobile"], function () { if (esri && dojo && map && map.loaded) { console.log("changing popup type to mobile"); var a = new esri.dijit.PopupMobile(null, dojo.create("div")); map.setInfoWindow(a) } }) } function switchToDesktop() { console.log("switch to desktop popup"), require(["esri/dijit/Popup"], function () { if (esri && dojo && map && map.loaded) { console.log("changing popup type to desktop"); var a = new esri.dijit.Popup(null, dojo.create("div")); map.setInfoWindow(a) } }) } function showZoomControl() { !hasTouch() && map && map.showZoomSlider() } function hideZoomControl() { hasTouch() && map && map.hideZoomSlider() } function locateAddress(a, b) { if (!a || a.keyCode == dojo.keys.ENTER) { $(".fm_search").hide(), $(".fm_location_input").val(""), String.prototype.trim = function () { return this.replace(/^\s*/, "").replace(/\s*$/, "") }; var c = b.trim(); geocoder || (geocoder = new esri.tasks.Locator("//geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer"), geocoder.outSpatialReference = map.spatialReference), c && "" !== c && geocoder.addressToLocations({ SingleLine: c }, ["*"], function (a) { if (a.length > 0) { a[0].attributes; map.getLevel() < 8 ? map.centerAndZoom(a[0].location, 7) : map.centerAt(a[0].location), setTimeout(function () { var a = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0]), 3), new dojo.Color(0, 0, 0, 0)); animateGraphicSymbol(new esri.Graphic(map.extent.expand(.8), a)) }, 500) } else alert("Address not found") }, function (a) { debug(dojo.toJson(a)) }) } } function animateGraphicSymbol(a) { var b = 1, c = a.symbol.color, d = a.geometry.type, e = a.symbol; "extent" == d ? (e.outline.color.a = b, e.color.a = 0) : e.color.a = b, map.graphics.add(a); var f = setInterval(function () { if ("extent" != d && e.setColor(new dojo.Color([c.r, c.g, c.b, b])), e.outline) { var g = e.outline.color; e.outline.setColor(new dojo.Color([g.r, g.g, g.b, b])) } a.setSymbol(e), b < .01 && (clearInterval(f), map.graphics.remove(a)), b -= .01 }, 20) } function parse(a) { var b = a.replace(/-/g, "/"), c = a.indexOf("."); return b.substring(0, c) } function constructSQL() { "" != visionZero.sqlDate && "" == visionZero.sqlView && "(" == visionZero.factorSqlString && (visionZero.sqlMain = visionZero.sqlInjuries + " AND (" + visionZero.sqlDate + ")"), "" != visionZero.sqlView && "" == visionZero.sqlDate && "(" == visionZero.factorSqlString && (visionZero.sqlMain = visionZero.sqlInjuries + " AND (" + visionZero.sqlView + ")"), "(" != visionZero.factorSqlString && "" == visionZero.sqlView && "" == visionZero.sqlDate && (visionZero.sqlMain = visionZero.sqlInjuries + " AND " + visionZero.factorSqlString), "(" == visionZero.factorSqlString && "" != visionZero.sqlDate && "" != visionZero.sqlView && (visionZero.sqlMain = visionZero.sqlInjuries + " AND (" + visionZero.sqlDate + ") AND (" + visionZero.sqlView + ")"), "(" != visionZero.factorSqlString && "" != visionZero.sqlDate && "" != visionZero.sqlView && (visionZero.sqlMain = visionZero.sqlInjuries + " AND (" + visionZero.sqlDate + ") AND (" + visionZero.sqlView + ") AND " + visionZero.factorSqlString), "" == visionZero.sqlDate && "" != visionZero.sqlView && "(" != visionZero.factorSqlString && (visionZero.sqlMain = visionZero.sqlInjuries + " AND (" + visionZero.sqlView + ") AND " + visionZero.factorSqlString), "" != visionZero.sqlDate && "" == visionZero.sqlView && "(" != visionZero.factorSqlString && (visionZero.sqlMain = visionZero.sqlInjuries + " AND (" + visionZero.sqlDate + ") AND " + visionZero.factorSqlString), "" == visionZero.sqlDate && "" == visionZero.sqlView && "(" == visionZero.factorSqlString && (visionZero.sqlMain = visionZero.sqlInjuries), void 0 !== visionZero.sqlLocations && "" != visionZero.sqlLocations && (visionZero.sqlMain += visionZero.sqlLocations) } function getCrashFactorLayer(a) { var b = map.getLayer(a); if (void 0 === b) { var c = new esri.layers.GraphicsLayer({ id: a }); for (var d in crashFactors) if (crashFactors[d].layername == a) { var e = new esri.symbol.PictureMarkerSymbol(crashFactors[d].icon, 22, 22), f = new esri.renderer.SimpleRenderer(e); c.setRenderer(f) } map.addLayer(c); map.getLayer("Multiple Factors"); if (visionZero.selectFactors.length > 1) { var h = map.getLayer("Multiple Factors"); if (void 0 === h) { h = new esri.layers.GraphicsLayer({ id: "Multiple Factors" }); var i = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_DIAMOND, 9, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new esri.Color([255, 0, 0, 1]))), j = new esri.renderer.SimpleRenderer(i); h.setRenderer(j), map.addLayer(h) } var k = map.graphicsLayerIds.length - 1; map.reorderLayer(h, k); var l = k - 1; map.reorderLayer(c, l) } disableCluster(), visionZero.crashLayerVisible = !0 } else { if (map.removeLayer(b), visionZero.selectFactors.length < 2) { var h = map.getLayer("Multiple Factors"); void 0 !== h && map.removeLayer(h) } updateCrashLayer(), visionZero.crashLayerVisible = !0, visionZero.selectFactors.length < 1 && enableCluster() } } function queryCrashFeatureLayer() { null != map.graphics && map.graphics.clear(), crashLayer.setDefinitionExpression(visionZero.sqlMain), notLocatedLayer.setDefinitionExpression(visionZero.sqlMain); var a = new esri.tasks.Query; a.returnGeometry = !0, a.outFields = ["ALCOHOL_FL", "CMV", "DISTRACTED_FLAG", "LANE_FL", "MOTORCYCLE_FLAG", "OLDER_DRIV", "PEDALCYCLIST_FLAG", "PEDESTRIAN_FLAG", "SPEED_FL", "TEEN_DRIVE", "UNBELTED_F"], a.where = visionZero.sqlMain, crashLayer.queryFeatures(a, queryCrashesComplete, onError) } function queryCrashesComplete(a) { for (var b = 0; b < a.features.length; b++) { var c = a.features[b]; c.setSymbol(setUpGraphic(c)); var d = map.getLayer(selectedLayerName); if (void 0 !== d && d.add(c), g > 1) { var e = new esri.symbol.TextSymbol(g).setOffset(0, -4); e.setColor(new esri.Color([255, 255, 255, 1])); var f = new esri.symbol.Font; f.setSize("9pt"), f.setWeight(esri.symbol.Font.WEIGHT_BOLD), e.setFont(f); var h = map.getLayer(selectedLayerName); void 0 !== h && h.add(new esri.Graphic(c.geometry, e)) } selectedLayerName = "" } } function SelectFactor(a) { var b = visionZero.selectFactors.indexOf(a); if (")" == visionZero.factorSqlString.slice(-1) && (visionZero.factorSqlString = visionZero.factorSqlString.slice(0, -1)), b == Number(-1)) visionZero.selectFactors.push(a), visionZero.selectFactors.sort(), 1 == visionZero.selectFactors.length ? visionZero.factorSqlString += a + "=1" : visionZero.factorSqlString += " OR " + a + "=1"; else { visionZero.factorSqlString.indexOf("(" + a + "=1") == Number(-1) ? visionZero.factorSqlString = visionZero.factorSqlString.replace(" OR " + a + "=1", "") : (0 == visionZero.selectFactors.indexOf(a) ? visionZero.factorSqlString = visionZero.factorSqlString.replace(a + "=1", "") : visionZero.factorSqlString = visionZero.factorSqlString.replace(" OR " + a + "=1", ""), visionZero.factorSqlString = visionZero.factorSqlString.replace("( OR ", "(")), visionZero.selectFactors.splice(b, 1), visionZero.selectFactors.sort() } visionZero.factorSqlString += ")", 0 == visionZero.selectFactors.length && (visionZero.factorSqlString = "("); var d; for (d in crashFactors) a == crashFactors[d].fieldname && getCrashFactorLayer(crashFactors[d].layername); constructSQL(), purgeExistingGraphicsContent(), queryCrashFeatureLayer() } function purgeExistingGraphicsContent() { for (var a in visionZero.selectFactors) for (var b in crashFactors) if (crashFactors[b].fieldname == visionZero.selectFactors[a]) { var c = map.getLayer(crashFactors[b].layername); void 0 !== c && c.clear() } var d = map.getLayer("Multiple Factors"); void 0 !== d && d.clear() } function setUpGraphic(a) { if (1 == visionZero.selectFactors.length && void 0 !== a.attributes[visionZero.selectFactors[0]]) { var b = visionZero.selectFactors[0]; crashFactors.forEach(function (a) { a.fieldname == b && (sym = new esri.symbol.PictureMarkerSymbol(a.icon, 22, 22), selectedLayerName = a.layername) }) } if (visionZero.selectFactors.length > 1) { for (var c = 0, d = "", e = 0; e < visionZero.selectFactors.length; e++) if (void 0 !== a.attributes[visionZero.selectFactors[e]]) { var f = a.attributes[visionZero.selectFactors[e]]; c += f, 1 == f && (d = visionZero.selectFactors[e]) } 1 == c && crashFactors.forEach(function (a) { a.fieldname == d && (sym = new esri.symbol.PictureMarkerSymbol(a.icon, 22, 22), selectedLayerName = a.layername) }), c > 1 && (g = c, sym = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_DIAMOND, 9, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new esri.Color([255, 0, 0, 1]))), selectedLayerName = "Multiple Factors") } return sym } function getFirstViewByContent() { if (0 != boundariesURL.length) { esri.request({ url: boundariesURL, content: { f: "json" }, callbackParamName: "callback" }).then(requestSucceeded, requestFailed) } } function getFieldInfo() { var a = document.getElementById("ViewBy"), b = a.selectedIndex; dropdwnVal = a[b].value, visionZero.dropdwnVal = dropdwnVal; var c = boundariesURL; "/" == c.substr(-1) ? c += dropdwnVal : c += "/" + dropdwnVal, esri.request({ url: c, content: { f: "json" }, callbackParamName: "callback" }).then(requestDisplayFieldSucceeded, requestFailed) } function requestSucceeded(a, b) { if (dojo.string.pad, dojo.toJsonIndentStr = "  ", a.hasOwnProperty("layers")) { console.log("got some layers"); var e = document.getElementById("ViewBy"); dojo.map(a.layers, function (a) { var b = document.createElement("option"); b.text = a.name, b.value = a.id, e.add(b) }) } } function requestDisplayFieldSucceeded(a, b) { dojo.string.pad, dojo.toJsonIndentStr = "  ", a.hasOwnProperty("displayField") && (displayField = a.displayField, visionZero.displayField = displayField, selectReferenceObject("1=1", dropdwnVal, displayField, !1)) } function requestFailed(a, b) { alert(a) } function setLocation(a) { visionZero.sqlLocations = a, "" != visionZero.sqlMain && (constructSQL(), crashLayer.setDefinitionExpression(visionZero.sqlMain), crashLayer.clearSelection(), notLocatedLayer.setDefinitionExpression(visionZero.sqlMain), myFeatureTable._createStoreFromDataQuery(), notLocatedFeatureTable._createStoreFromDataQuery()) } function executeVisionZeroQueryTask(a) { queryVisionTask = new esri.tasks.QueryTask(crashURL), queryVision = new esri.tasks.Query, queryVision.outSpatialReference = { wkid: 102100 }, queryVision.returnGeometry = !0, queryVision.outFields = ["*"], queryVision.where = visionZero.sqlMain, map.infoWindow.hide(), map.graphics.clear(), featureSetVision = null; var b = 960, c = a.mapPoint.x - b, d = a.mapPoint.x + b, e = a.mapPoint.y - b, f = a.mapPoint.y + b, g = new esri.geometry.Extent(c, e, d, f, new esri.SpatialReference({ wkid: 102100 })); queryVision.geometry = g, crashLayer.selectFeatures(queryVision, esri.layers.FeatureLayer.SELECTION_NEW), queryVisionTask.execute(queryVision, function (b) { 1 === b.features.length ? showFeature(b.features[0], a) : 0 !== b.features.length ? showFeatureSet(b, a) : (map.infoWindow.hide(), map.graphics.clear()) }) } function showFeature(a, b) { var c = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_CIRCLE, 14, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new esri.Color([0, 255, 197, 1]))); a.setSymbol(c); var d = a.attributes, g = (myFeatureTable.getRowDataById(d.OBJECTID), "<span style='font-weight:bold;'>Crash ID:</span> " + d.CRSH_ID); null != d.Severity && void 0 !== d.Severity ? g += "<br /><span style='font-weight:bold;'>Severity:</span> " + d.Severity : g += "<br /><span style='font-weight:bold;'>Severity:</span> Unknown", g += "<br /><span style='font-weight:bold;'>Crash Date:</span> " + buildDate(d.CRASH_DATE) + "<br /><span style='font-weight:bold;'>Crash Type:</span> " + d.CRASH_TYPE + "<p><span style='font-weight:bold;'>Driver Factors:</span>", 1 == d.ALCOHOL_FL && (g += " Alcohol"), 1 == d.UNBELTED_F && (g += " Unbelted"), 1 == d.SPEED_FL && (g += " Speeding"), 1 == d.DISTRACTED_FLAG && (g += " Distracted"), 1 == d.LANE_FL && (g += " Lane Departure"), g += "</p>", g += "<p><span style='font-weight:bold;'>Driver Age Groups:</span>", 1 == d.TEEN_DRIVE && (g += " Under 21"), 1 == d.OLDER_DRIV && (g += " 65 or older"), g += "</p>", g += "<p><span style='font-weight:bold;'>Vehicles:</span>", 1 == d.PEDALCYCLIST_FLAG && (g += " Bicycle"), 1 == d.PEDESTRIAN_FLAG && (g += " Pedestrian"), 1 == d.MOTORCYCLE_FLAG && (g += " Motorcycle"), 1 == d.CMV && (g += " Commercial Vehicle"), null != d.LOCAL_USE && (g += "<br /><span style='font-weight:bold;'>NCDPS Crash Report:</span> <a href='https://www.coverlab.org/ncdpsreportsearch.html?name=" + d.LOCAL_USE + "' target='_blank'>Open...</a>"), map.graphics.add(a), map.infoWindow.setTitle("Vision Zero Selection"), map.infoWindow.setContent(g), b && map.infoWindow.show(b.screenPoint, map.getInfoWindowAnchor(b.screenPoint)) } function showFeatureSet(a, b) { var c = b.screenPoint; featureSetVision = a; for (var d = featureSetVision.features.length, e = "You have selected " + d + " fields.", f = "Please select desired field from the list below.<br />", g = 0; g < d; g++) { f = f + featureSetVision.features[g].attributes.CRSH_ID + " Field (<A href='#' onclick='showFeature(featureSetVision.features[" + g + "]);'>show</A>)<br/>" } map.infoWindow.setTitle(e), map.infoWindow.setContent(f), map.infoWindow.show(c, map.getInfoWindowAnchor(b.screenPoint)) } function SelectShareFactors(a) { visionZero.factorSqlString = a; var b; for (b in crashFactors) for (scf in visionZero.selectFactors) visionZero.selectFactors[scf] == crashFactors[b].fieldname && (getCrashFactorLayer(crashFactors[b].layername), ShareSelectedFactors(crashFactors[b].css_class)); constructSQL(), purgeExistingGraphicsContent(), queryCrashFeatureLayer() } function clearMapGraphics() { map.graphics.clear(), map.getLayer("Reference Graphics Data").clear(); for (var b in visionZero.selectFactors) for (var c in crashFactors) if (visionZero.selectFactors[b] == crashFactors[c].fieldname) { var d = map.getLayer(crashFactors[c].layername); map.removeLayer(d) } visionZero.selectFactors = [], visionZero.factorSqlString = "(", constructSQL(), crashLayer.hide(), notLocatedLayer.hide(), disableCluster(), crashLayer.clearSelection(), refGraphicsLayer.clear(), refLayerVisibility = [], refLayerVisibility.push(-1), setSubLayerVisibility(refLayer, refLayerVisibility) } function stringifyObject(a) { return JSON.stringify(a) } function hideZoomSlider() { dojo.connect(map, "onLoad", function () { map.hideZoomSlider() }) } function showZoomSlider() { dojo.connect(map, "onLoad", function () { map.showZoomSlider() }) } dojo.require("esri.dijit.Legend"), dojo.require("esri.dijit.Measurement"), dojo.require("esri.dijit.Scalebar"), dojo.require("esri.map"), dojo.require("esri.tasks.locator"), dojo.require("esri.tasks.query"), dojo.require("esri.arcgis.utils"), dojo.require("dojo._base.array"), dojo.require("esri.dijit.PopupTemplate"), dojo.require("esri.dijit.FeatureTable"), dojo.require("esri.dijit.Print"), dojo.require("esri.symbols.SimpleMarkerSymbol"), dojo.require("esri.symbols.PictureMarkerSymbol"), dojo.require("esri.symbols.SimpleFillSymbol"), dojo.require("esri.symbols.SimpleLineSymbol"), dojo.require("esri.Color"), dojo.require("esri.renderer"); var map, printer = null, currentBasemap, geocoder, webmapResponse, layerWidget, legend, arrayUtils, refLayer, crashLayer, notLocatedLayer, boundariesURL = "//gis.coverlab.org/arcgis/rest/services/vzmaps/Boundaries_WebMercator/MapServer/", crashURL = "//gis.coverlab.org/arcgis/rest/services/vzmaps/crash_service/MapServer/0", crashURLNotLocated = "//gis.coverlab.org/arcgis/rest/services/vzmaps/crash_service/MapServer/1", boundariesLayerInfo = [], refLayerVisibility = [], sfs, refGraphicsLayer, crashGraphicsLayer, clusterLayer, crashTots, totalCnt, selectionSymbol, myFeatureTable, notLocatedFeatureTable, crashRend, defaultcrashSymbol, fromDate = "", toDate = "", sqlDate = "", sqlView = "", sqlMain = "", sqlInjuries = "", visionZero, factorSqlString = "(", g, sym, selectedLayerName, mapClicked, featureSetVision, queryVisionTask, queryVision, basemaps = { currentVersion: 10.01, folders: ["Canvas", "Demographics", "Elevation", "Reference", "Specialty"], services: [{ name: "Reference/World_Transportation", type: "MapServer", image: "street-imagery.png", title: "Street Map w/ Imagery" }, { name: "World_Imagery", type: "MapServer", image: "bm-imagery.jpg", title: "Imagery" }, { name: "World_Street_Map", type: "MapServer", image: "bm-street.jpg", title: "Street Map" }, { name: "World_Topo_Map", type: "MapServer", image: "bm-topo.jpg", title: "Topography" }] }, crashFactors = [{ fieldname: "ALCOHOL_FL", layername: "Alcohol", R: 197, G: 27, B: 125, A: 1, icon: "fm_style/fm_icons/newicons/alcohol-selected-30.png", css_class: "fm_factor_alcohol" }, { fieldname: "CMV", layername: "Commercial Vehicle", R: 77, G: 146, B: 33, A: 1, icon: "fm_style/fm_icons/newicons/truck-selected-30.png", css_class: "fm_factor_truck" }, { fieldname: "DISTRACTED_FLAG", layername: "Distracted", R: 77, G: 146, B: 33, A: 1, icon: "fm_style/fm_icons/newicons/dd-selected-30.png", css_class: "fm_factor_distracted" }, { fieldname: "LANE_FL", layername: "Lane Departure", R: 77, G: 146, B: 33, A: 1, icon: "fm_style/fm_icons/newicons/lane-selected-30.png", css_class: "fm_factor_lane" }, { fieldname: "MOTORCYCLE_FLAG", layername: "Motorcycle", R: 77, G: 146, B: 33, A: 1, icon: "fm_style/fm_icons/newicons/motorcycle-selected-30.png", css_class: "fm_factor_motorcycle" }, { fieldname: "OLDER_DRIV", layername: "65 or older", R: 77, G: 146, B: 33, A: 1, icon: "fm_style/fm_icons/newicons/60orolder-selected-30.png", css_class: "fm_factor_olderdriver" }, { fieldname: "PEDALCYCLIST_FLAG", layername: "Bicycle", R: 77, G: 146, B: 33, A: 1, icon: "fm_style/fm_icons/newicons/bike-selected-30.png", css_class: "fm_factor_bike" }, { fieldname: "PEDESTRIAN_FLAG", layername: "Pedestrian", R: 77, G: 146, B: 33, A: 1, icon: "fm_style/fm_icons/newicons/pedestrian-selected-30.png", css_class: "fm_factor_pedestrian" }, { fieldname: "SPEED_FL", layername: "Speed", R: 184, G: 225, B: 134, A: 1, icon: "fm_style/fm_icons/newicons/speeding-selected-30.png", css_class: "fm_factor_pedestrian" }, { fieldname: "TEEN_DRIVE", layername: "Under 21", R: 77, G: 146, B: 33, A: 1, icon: "fm_style/fm_icons/newicons/under21-selected-30.png", css_class: "fm_factor_under21" }, { fieldname: "UNBELTED_F", layername: "Unbelted", R: 0, G: 128, B: 0, A: 1, icon: "fm_style/fm_icons/newicons/seatbelt-selected-30.png", css_class: "fm_factor_unbelted" }]; dojo.ready(function () { }); var targetField, referenceVals = []; dojo.ready(init), window.onorientationchange = function () { map ? map.resize() : console.log("map not found") }, window.onresize = function () { map ? map.resize() : console.log("map not found") }; var dropdwnVal, displayField;